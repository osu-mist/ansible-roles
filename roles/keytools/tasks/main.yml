---
  - name: check if modify keytool passwords or not
    fail:
      msg: "Please enter new passwords for keystore and truststore!"
    when: store_password == "password" or key_password == "password"

  - name: copy gen-keytool-certs.sh to dest
    template:
      src: gen-keytool-certs.sh.j2
      dest: "{{ script_path }}"
    become: yes
    become_user: "{{ api_user }}"

  - name: run gen-keytool-certs.sh
    command: sh {{ script_path }}
    register: script_result
    become: yes
    become_user: "{{ api_user }}"
    tags:
      - skip_ansible_lint

  - debug: msg={{ script_result.stdout_lines }}

  - name: clean up gen-keytool-certs.sh
    file:
      path: "{{ script_path }}"
      state: absent

  - name: stat new certs
    stat:
      path: "{{ apis_home }}/{{ item }}"
    with_items:
      - "{{ keystore_file }}"
      - "{{ truststore_file }}"
      - "{{ certificate_file }}"
      - "{{ private_key_file }}"
    register: new_certs_stat

  - name: stat old certs
    stat:
      path: "{{ keytool_files_path }}/{{ item }}"
    with_items:
      - "{{ keystore_file }}"
      - "{{ truststore_file }}"
      - "{{ certificate_file }}"
      - "{{ private_key_file }}"
    register: old_certs_stat

  - name: backup certs to keytool_files/backup
    command: mv {{ keytool_files_path }}/{{ item.old_cert.item }} {{ backup_path }}/{{ item.new_cert.item }}-{{ ansible_date_time.iso8601 }}
    when: "{{ item.old_cert.stat.exists }} and {{ item.new_cert.stat.exists }}"
    with_items:
      - { old_cert: "{{ old_certs_stat.results[0] }}", new_cert: "{{ new_certs_stat.results[0] }}" }
      - { old_cert: "{{ old_certs_stat.results[1] }}", new_cert: "{{ new_certs_stat.results[1] }}" }
      - { old_cert: "{{ old_certs_stat.results[2] }}", new_cert: "{{ new_certs_stat.results[2] }}" }
      - { old_cert: "{{ old_certs_stat.results[3] }}", new_cert: "{{ new_certs_stat.results[3] }}" }

  - name: move certs to keytool_files
    command: mv {{ apis_home }}/{{ item.item }} {{ keytool_files_path }}/{{ item.item }}
    when: "{{ item.stat.exists }}"
    with_items: "{{ new_certs_stat.results }}"

  - name: get hash of cert
    shell: "openssl x509 -noout -modulus -in {{ keytool_files_path }}/{{ certificate_file }} | openssl md5"
    register: cert_hash

  - name: get hash of key
    shell: "openssl rsa -noout -modulus -in {{ keytool_files_path }}/{{ private_key_file }} | openssl md5"
    register: key_hash

  - name: fail if cert and key hashes don't match
    fail:
      msg: "{{ certificate_file }} and {{ private_key_file }} do not pair as a public and private key."
    when: cert_hash.stdout != key_hash.stdout
