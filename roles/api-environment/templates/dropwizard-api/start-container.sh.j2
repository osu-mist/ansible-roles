#!/bin/sh
# jenkins-run.sh - starts or restarts an api with docker
# usually called remotely by jenkins

# usage: start-container.sh API-NAME API-VERSION

set -eu

api_name=$1
api_version=$2

if [ -z "$api_name" ] || [ -z "$api_version" ]; then
    echo 2>&1 "usage: jenkins-run.sh API-NAME API-VERSION"
    exit 1
fi
if [ "$(echo $api_name | tr -d "A-Za-z0-9-_")" ]; then
    echo 2>&1 "invalid api name: $api_name"
    exit 1
fi

api_dir=/apis/apis/$api_name/$api_version
container_name="$api_name.$api_version"

if [ ! -d "$api_dir" ]; then
    echo 2>&1 "api dir does not exist: $api_dir"
    exit 1
fi

cd $api_dir

archive=$(ls "$api_name"-*-all.jar | sort | tail -1)
config=/apis/config/$api_name-$api_version.yaml
env=/apis/env/$api_name-$api_version.env
keytool_path=/apis/keytool_files

if [ ! -e "$config" ]; then
    config=$api_dir/configuration.yaml
fi

uid="$(id -u {{ api_user }})"
gid="$(id -g {{ api_user }})"

# Stop and destroy container if it's already running
if [[ "$(docker ps -aq -f name=$container_name)" ]]; then
    echo "Stop existing container"
    docker stop "$container_name"
    docker rm "$container_name"

    # Sometimes docker will still think a container exists after doing "docker rm"
    # Pause the script for a few seconds before creating the container again
    until [[ ! "$(docker ps -aq -f name=$container_name)" ]]; do
        sleep 1
    done
fi

echo "Start container"

java_command="java -Xmx100m -jar $archive server $config"
health_command='curl -k -fsS https://localhost:$ADMIN_PORT/ping'

docker run \
    -d \
    --name $container_name \
    --label jar=$archive \
    --restart on-failure:3 \
    --user="$uid:$gid" \
    --workdir="$api_dir" \
    --env-file "$env" \
    --network host \
    --health-cmd="$health_command" \
    --health-interval={{ container_health_interval_seconds }}s \
    --health-timeout {{ container_health_timeout_seconds }}s \
    --volume $keytool_path/server.keystore:$keytool_path/server.keystore:ro \
    --volume $keytool_path/server.truststore:$keytool_path/server.truststore:ro \
    --volume $api_dir:$api_dir \
    --volume $config:$config:ro \
    {{ dropwizard_docker_image }} \
    /bin/bash -c "$java_command"

if [[ ! $(docker ps -q -f name=$container_name) ]]; then
    echo "ERROR: Container not running"
    exit 1
fi

{% include 'wait-for-container.sh.j2' %}
