#!/bin/sh
# start-express-container.sh - starts an express api with docker
# Usually called remotely by jenkins
# Usage: start-express-container.sh API-NAME

set -eu

api_name=$1

api_path=/apis/apis/$api_name
env=/apis/env/$api_name.env
config=/apis/config/$api_name
workdir=/usr/src/$api_name

cd $api_path

# Stop and destroy container if it's already running
if [[ "$(docker ps -aq -f name=$api_name)" ]]; then
    echo "Stop existing container $(docker stop $api_name)"
    echo "Remove existing container $(docker rm "$api_name")"

    # Sometimes docker will still think a container exists after doing "docker rm"
    # Pause the script for a few seconds before creating the container again
    until [[ ! "$(docker ps -aq -f name=$api_name)" ]]; do
        sleep 1
    done
fi

# Create logs folder and make sure the API have access to wrtie logs into it
mkdir -p $api_path/logs
chown -R {{ api_user }}:{{ api_group }} $api_path/logs

# Run API in a container
uid="$(id -u {{ api_user }})"
gid="$(id -g {{ api_user }})"
docker run -d \
           --user "$uid:$gid" \
           --workdir $workdir \
           --env API_NAME=$api_name \
           --env FOREVER_ROOT=$workdir/.forever \
           --env-file $env \
           --volume /apis/keytool_files:$workdir/keytool_files:ro \
           --volume $config:$workdir/config:ro \
           --volume $api_path:$workdir \
           --network host \
           --health-cmd 'curl -k -fsS --user $USER:$PASSWD https://localhost:$ADMIN_PORT/api/v1' \
           --health-interval {{ container_health_interval_seconds }}s \
           --health-timeout {{ container_health_timeout_seconds }}s \
           --name $api_name \
           --restart on-failure:3 \
           express-api-run

if [[ ! $(docker ps -q -f name=$api_name) ]]; then
   echo "ERROR: Container not running"
   exit 1
fi

{% include 'timeout-delay.sh.j2' %}
