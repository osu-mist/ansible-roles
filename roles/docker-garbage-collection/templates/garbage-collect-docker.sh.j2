#!/bin/bash

# garbage-collect-docker.sh
# Backs up and removes dangling docker images. Removes stopped containers
#   preventing any image removal

stopped_container_sed_pattern="{{stopped_container_sed_pattern}}"
backup_images="{{garbage_home}}/{{backup_images}}"

{% raw %}

###
# remove_image()
# Description: Attempts to remove an image. If a stopped container prevents
#   this, it removes the container and tries again.
# Parameters: $1 is image ID
###
remove_image()
{
    local id
    local removal_output
    local removal_exit
    id=$1
    removal_output=$(docker rmi $id 2>&1)
    removal_exit=$(echo $?)

    # check for stopped container preventing removal
    container_id=$(echo $removal_output | sed -n -e "$stopped_container_sed_pattern")
    if [ $removal_exit -eq 1 ] && [ ${#container_id} -gt 1 ]
    then
        docker rm $container_id
        remove_image $id
    fi
}

###
# Main function of script
###
main()
{
    # collect IDs of dangling images
    dangling_ids=($(docker images --filter "dangling=true" --format "{{.ID}}"))

    for id in "${dangling_ids[@]}"
    do
        # backup dangling image
        $(docker save -o $backup_images/$id.tar $id)

        # remove dangling image
        remove_image $id
    done

}

main

{% endraw %}
